
! Load these patterns before "c2dyl.dat" for converting C++ to Dylan.

\I<type>\G\W<I>\:\:<I>(<parms>)\G<space>\{<body>\}=\
	\ndefine method @rid{$3}(this \:\: \<$2\>@comma{$4}) \
	\=\> $1\;$5\
	\n\ block(return)\n\t$6\N\ end block\;\nend method @rid{$3}\;

<I>\:\:$1(<parms>)\G<space>\{<body>\}=\
	\ndefine method initialize (this \:\: \<$1\>@comma{$2}) \
	\=\> ()\;$3\n\t$4\Nend method initialize\;

<I>\:\:\~$1(<parms>)\G<space>\{<body>\}=\
	\ndefine method %destructor (this \:\: \<$1\>@comma{$2}) \
	\=\> ()\;$3\n\t$4\Nend method %destructor\;

class <I><space>\{<fields>\}<space>*\;=\
	@set{sclass;\<$1\>}\
	define class ${sclass} ( \<object\> )$2\N$3\Nend class ${sclass}\;$4\
	\N@sdefs{*}\N

comma:\A\W\Z=
comma:*=, *

type:STDMETHODIMP_(<type>)=$1@end

statement:<I> <I>(<argument-expression-list>)\G\;=\
	let @rid{$2} \:\: \<$1\> \= make(\<$1\>@comma{$3})\;

type:new=@fail
